(function() {
    var _dragged;
    ko.bindingHandlers.drag = {
        init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
            var dragElement = $(element);
            var dragOptions = {
                helper: 'clone',
                revert: true,
                revertDuration: 0,
                start: function() {
                    _dragged = ko.utils.unwrapObservable(valueAccessor().value);
                },
                cursor: 'default'
            };
            dragElement.draggable(dragOptions).disableSelection();
        }
    };

    ko.bindingHandlers.drop = {
        init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
            var dropElement = $(element);
            var dropOptions = {
                drop: function(event, ui) {
                    // Make a new _dragged object so we don't attach the observables
                    _dragged = new Snippet(_dragged.id, _dragged.title(), _dragged.description(), _dragged.code(), _dragged.options(), _dragged.returns());
                    var str = _dragged.code();
                    var opts = str.substring(str.indexOf('(') + 1, str.indexOf(')')).replace(/^\s+|\s+$/g, "").split(',');
                    for (i in opts) {
                        o = opts[i].replace(/^\s+|\s+$/g, "");
                        if (o != "callback") {
                            _dragged.options.push(new SnippetOption(o, ''));
                        }
                    }
                    valueAccessor().value(_dragged);
                }
            };
            dropElement.droppable(dropOptions);
        }
    };

    ko.bindingHandlers.dropReturn = {
        init: function(element, valueAccessor, allBindingsAccessor, viewModel) {
            var dropElement = $(element);
            var dropOptions = {
                drop: function (event, ui) {
                    var position = evm.exploit.indexOf(_dragged);
                    valueAccessor().value.value = 'clientStorage.' + position;
                    dropElement.val('clientStorage.' + position);
                }
            };
            dropElement.droppable(dropOptions);
        },
    };
})();


function SnippetOption(key, value) {
    this.key = ko.observable(key);
    this.value = ko.observable(value);
};

function Snippet(id, title, description, code, options, returns) {
    this.id = id;
    this.title = ko.observable(title);
    this.description = ko.observable(description);
    this.code = ko.observable(code);
    this.options = ko.observableArray([]);
    this.returns = ko.observable(returns);
};


function exploitViewModel() {
    var self = this;
    self.id = '';
    self.title = ko.observable()
    self.snippets = ko.observableArray();
    self.exploit = ko.observableArray();
    self.latestSnippet = ko.computed({
        read: function() {
            return self.exploit().length ? self.exploit()[0] : "";
        },
        write: function(value) {
            self.exploit.push(value);
        },
        owner: self
    });

    self.removeSnippet = function (snippet) {
        self.exploit.remove(snippet);
    };

    // Refresh the list of snippets
    self.getSnippets = function () {
        $.getJSON('/snippets.json', function (data) {
            var mappedData = ko.utils.arrayMap(data, function(item) {
                var item = JSON.parse(item);
                return new Snippet(item.id,item.title, item.description, item.code, item.options, item.returns);
            });
            self.snippets(mappedData);
        });
    };

    self.saveExploit = function () {
        $.ajax({
            url: '/exploit/add',
            type: 'post',
            contentType: "application/json",
            data: ko.toJSON(self),
            headers: {
                'X-CSRF-Token': csrf_token
            }
        }).done(function (reply) {
            if (reply) {
                self.id = reply;
                history.replaceState({}, "edit exploit " + self.id, "/exploit/edit/" + self.id);
            }
        });
    };

    self.print = function() {
        var json = JSON.parse(ko.toJSON(self));
        var exploit = json.exploit;
        //exploit.title = json.title;
        console.log(exploit);
        console.log(json.snippets);
    };

    self.getSnippets();
}

$().ready(function () {
    var id = window.location.pathname.split('/')[3];
    if (id) {
        $.getJSON('/exploit/' + id + '.json', function (data) {
            console.log(data);
            evm = new exploitViewModel();
            evm.id = data.id;
            evm.title(data.title);
            evm.snippets(data.snippets);
            evm.exploit(data.exploit);
            ko.applyBindings(evm);
        });
    } else {
        evm = new exploitViewModel();
        ko.applyBindings(evm);
    }
});
